package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"strconv"
	"strings"

	influxdb2 "github.com/influxdata/influxdb-client-go/v2"
)

const (
	influxDBHost   = "http://192.168.1.88:8086"
	influxDBToken  = "RHl3fYEp8eMLtIUraVPzY4zp_hnnu2kYlR9hYrUaJLcq5mB2PvDsOi9SR0Tu_i-t_183fHb1a95BTJug-vAPVQ=="
	influxDBOrg    = "Milano"
	influxDBBucket = "MWPWater"
)

var timeWindows = map[string]string{
	"1m":   "1m",
	"5m":   "5m",
	"1h":   "1h",
	"12h":  "12h",
	"24h":  "24h",
	"7d":   "168h",
	"30d":  "720h",
	"3mo":  "2160h",
	"6mo":  "4320h",
	"12mo": "8760h",
}

func buildQuery(bucket, timeRange, aggregateWindow, controller, zone string) string {
	return fmt.Sprintf(`
        // First query: Get summed intervalFlow
        intervalFlow = from(bucket: "%s")
            |> range(start: -%s)
            |> filter(fn: (r) => r["_measurement"] == "mwp_sensors")
            |> filter(fn: (r) => r["_field"] == "intervalFlow")
            |> filter(fn: (r) => r["Controller"] == "%s" and r["Zone"] == "%s")
            |> aggregateWindow(every: %s, fn: sum, createEmpty: false)
            |> yield(name: "intervalFlow")

        // Second query: Get averaged pressurePSI
        pressure = from(bucket: "%s")
            |> range(start: -%s)
            |> filter(fn: (r) => r["_measurement"] == "mwp_sensors")
            |> filter(fn: (r) => r["_field"] == "pressurePSI")
            |> filter(fn: (r) => r["Controller"] == "%s" and r["Zone"] == "%s")
            |> aggregateWindow(every: %s, fn: mean, createEmpty: false)
            |> yield(name: "pressure")

        // Third query: Get averaged temperatureF
        temperature = from(bucket: "%s")
            |> range(start: -%s)
            |> filter(fn: (r) => r["_measurement"] == "mwp_sensors")
            |> filter(fn: (r) => r["_field"] == "temperatureF")
            |> filter(fn: (r) => r["Controller"] == "%s" and r["Zone"] == "%s")
            |> aggregateWindow(every: %s, fn: mean, createEmpty: false)
            |> yield(name: "temperature")

        // Fourth query: Get averaged amperage
        amperage = from(bucket: "%s")
            |> range(start: -%s)
            |> filter(fn: (r) => r["_measurement"] == "mwp_sensors")
            |> filter(fn: (r) => r["_field"] == "amperage")
            |> filter(fn: (r) => r["Controller"] == "%s" and r["Zone"] == "%s")
            |> aggregateWindow(every: %s, fn: mean, createEmpty: false)
            |> yield(name: "amperage")
    `, bucket, timeRange, controller, zone, aggregateWindow,
		bucket, timeRange, controller, zone, aggregateWindow,
		bucket, timeRange, controller, zone, aggregateWindow,
		bucket, timeRange, controller, zone, aggregateWindow)
}

func main() {
	// Command line flags with short and long versions
	var windowFlag string
	var rangeFlag string
	var controllerFlag string
	var zoneFlag string

	// Long versions
	flag.StringVar(&windowFlag, "window", "", "Time window for aggregation (1m, 5m, 1h, 12h, 24h, 7d, 30d, 3mo, 6mo, 12mo)")
	flag.StringVar(&rangeFlag, "range", "24h", "Time range to query (same options as window)")
	flag.StringVar(&controllerFlag, "controller", "3", "Controller number (1-5)")
	flag.StringVar(&zoneFlag, "zone", "1", "Zone number (1-16)")

	// Short versions
	flag.StringVar(&windowFlag, "w", "", "Time window for aggregation (shorthand)")
	flag.StringVar(&rangeFlag, "r", "24h", "Time range to query (shorthand)")
	flag.StringVar(&controllerFlag, "c", "3", "Controller number (shorthand)")
	flag.StringVar(&zoneFlag, "z", "1", "Zone number (shorthand)")

	flag.Parse()

	// If window not specified, use range value
	if windowFlag == "" {
		windowFlag = rangeFlag
	}

	// Validate time window and range
	if _, ok := timeWindows[windowFlag]; !ok {
		fmt.Printf("Invalid time window. Valid options are: %s\n", strings.Join(keys(timeWindows), ", "))
		os.Exit(1)
	}
	if _, ok := timeWindows[rangeFlag]; !ok {
		fmt.Printf("Invalid time range. Valid options are: %s\n", strings.Join(keys(timeWindows), ", "))
		os.Exit(1)
	}

	// Validate controller and zone
	controllerNum, err := strconv.Atoi(controllerFlag)
	if err != nil || controllerNum < 1 || controllerNum > 5 {
		fmt.Println("Invalid controller. Must be between 1 and 5")
		os.Exit(1)
	}

	zoneNum, err := strconv.Atoi(zoneFlag)
	if err != nil || zoneNum < 1 || zoneNum > 16 {
		fmt.Println("Invalid zone. Must be between 1 and 16")

		os.Exit(1)
	}

	// Configure client
	client := influxdb2.NewClient(influxDBHost, influxDBToken)
	defer client.Close()

	// Get query client
	queryAPI := client.QueryAPI(influxDBOrg)

	// Build and execute query
	query := buildQuery(influxDBBucket, timeWindows[rangeFlag], timeWindows[windowFlag], controllerFlag, zoneFlag)
	result, err := queryAPI.Query(context.Background(), query)
	if err != nil {
		fmt.Printf("Query error: %s\n", err)
		os.Exit(1)
	}

	// Process results
	fmt.Printf("\nController: %s, Zone: %s\n", controllerFlag, zoneFlag)
	fmt.Printf("Time Window: %s, Range: %s\n\n", windowFlag, rangeFlag)
	for result.Next() {
		record := result.Record()
		fmt.Printf("Time: %s, Field: %s, Value: %v\n",
			record.Time().Format("2006-01-02 15:04:05"),
			record.Field(),
			record.Value())
	}

	if result.Err() != nil {
		fmt.Printf("Query result error: %s\n", result.Err())
		os.Exit(1)
	}
}

func keys(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	return keys
}
